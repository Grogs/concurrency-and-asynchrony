package backup

object MonixTask extends Example {

  //given def upload(doc: String): Future[Unit]
  import monix.eval.Task

  def uploadMonix(doc: String) = Task.deferFuture(upload(doc))

  def uploadAll(input: List[String], concurrency: Int): Task[List[Unit]] = {
    //    Task.traverse(input)(uploadMonix)
    val allUploads = input.map(uploadMonix)
    val uploadBatches = allUploads.grouped(concurrency).map(g => Task.gather(g))
    Task.sequence(uploadBatches).map(_.flatten.toList)
  }

  val docs = (1 to 10).toList.map(_.toString)

  await(uploadAll(docs, 3).runToFuture)

}
